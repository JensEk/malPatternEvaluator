{
    "remoteAccessMFA": {
        "description": "Identifies [Credentials] linked to a remote access [Application] without an associated {ConditionalAuthentication}.",
        "impact": "Missing Multi-Factor Authentication (MFA) on a remote access service may enable successful authentication by brute force attacks or login with compromised credentials.",
        "badPattern": [
            "MATCH (app:Application) WHERE app.name =~ '(?i).*VPN.*|.*RDP.*|.*Remote Access.*|.*Remote Service.*|.*Remote Desktop.*|.*SSH.*'",
            "WITH app",
            "MATCH (app)--(usr:Identity)--(cred:Credentials)",
            "WHERE NOT ANY(factor IN [(cred)<-[:requiredFactors]-(mfa:Credentials) | mfa.name] WHERE factor =~ '(?i).*MFA.*|.*2FA.*|.*Multi-Factor.*|.*Two-Factor.*')",
            "RETURN DISTINCT cred.name",
            "UNION",
            "MATCH (app:Application) WHERE app.name =~ '(?i).*VPN.*|.*RDP.*|.*Remote Access.*|.*Remote Service.*|.*Remote Desktop.*|.*SSH.*'",
            "WITH app",
            "MATCH (app)-[:hostApp]-(:Application)--(usr:Identity)--(cred:Credentials)",
            "WHERE NOT ANY(factor IN [(cred)<-[:requiredFactors]-(mfa:Credentials) | mfa.name] WHERE factor =~ '(?i).*MFA.*|.*2FA.*|.*Multi-Factor.*|.*Two-Factor.*')",
            "RETURN DISTINCT cred.name;"
        ],
        "mitigation": [
            "MATCH (cred:Credentials) WHERE cred.name = '$1'",
            "WITH cred",
            "CREATE (cred2:Credentials {metaconcept: 'Credentials', name: 'MFA'}), (cred)-[:credentials]->(cred2), (cred2)-[:requiredFactors]->(cred)"
        ],
        "attackData": 
            {
                "Tactic": {
                    "Initial Access": ["T1133", "T1078"],
                    "Persistence": ["T1078"],
                    "Credential Access": ["T1110"]
                },
                "Mitigations": ["M1036", "M1032", "M1030", "M1017"]
            }
    },
    "highPrivAccountsMFA": {
        "description": "Identifies [Credentials] linked to a [User] associated [Identity] with extended priviliges and without an associated {ConditionalAuthentication}.",
        "impact": "Missing Multi-Factor Authentication (MFA) on accounts with high privileges may enable lateral movements and unauthorized access to resources.",
        "badPattern": [
            "MATCH (:User)--(id:Identity)-[:highPrivAppIAMs|executionPrivIAMs|writingIAMs|deletingIAMs]->(),(id)--(cred:Credentials)",
            "WHERE NOT (cred)<-[:requiredFactors]-()",
            "RETURN DISTINCT cred.name;"
        ], 
        "mitigation": [
            "MATCH (cred:Credentials) WHERE cred.name = '$1'",
            "WITH cred",
            "CREATE (cred2:Credentials {metaconcept: 'Credentials', name: 'MFA'}), (cred)-[:credentials]->(cred2), (cred2)-[:requiredFactors]->(cred)"
        ],
        "attackData": 
            {
                "Tactic": {
                    "Privilege Escalation": ["T1078"],
                    "Defense Evasion": ["T1078"],
                    "Credential Access": ["T1110"]
                },
                "Mitigations": ["M1032","M1027","M1026"]
            }
    },
    "unencryptedData": {
        "description": "Identifies [Data] linked to an [Application] where associated {encryptCreds} are missing.",
        "impact": "Sensitive data (e.g., credentials, keys, tokens) stored in plaintext without encryption may be susceptible to unauthorized access and compromise.",
        "badPattern": [
            "MATCH (data:Data)-[:containedData]->(:Application)",
            "WHERE data.name =~ '(?i).*Secret.*|.*Sensitive.*|.*Key.*|.*Password.*|.*Credential.*|.*Token.*|.*Certificate.*|.*Ticket.*|.*Cookie.*' AND NOT (data)-[:encryptedData]->(:Credentials)",
            "RETURN DISTINCT data.name;"
        ],    
        "mitigation": [
            "MATCH (data:Data) WHERE data.name = '$1'",
            "WITH data",
            "CREATE (cred:Credentials {metaconcept: 'Credentials', name: 'EncryptionKey'}), (cred)<-[:encryptedData]-(data), (cred)-[:encryptCreds]->(data)"
        ],
        "attackData": 
            {
                "Tactic": {
                    "Credential Access": ["T1555", "T1003", "T1528", "T1649", "T1558", "T1539", "T1552"]
                },
                "Mitigations": ["M1047", "M1041", "M1027", "M1026", "M1022", "M1017", "M1032", "M1043", "M1040"]
            }
    },
    "unencryptedInfo": {
        "description": "Identifies [Information] contained in [Data] where associated {encryptCreds} are missing.",
        "impact": "Sensitive information (e.g., credentials, keys, tokens) stored in plaintext without encryption may be susceptible to unauthorized access and compromise.",
        "badPattern": [
            "MATCH (info:Information)<-[:containerData]-(data:Data)",
            "WHERE info.name =~ '(?i).*Secret.*|.*Sensitive.*|.*Key.*|.*Password.*|.*Credential.*|.*Token.*|.*Certificate.*|.*Ticket.*|.*Cookie.*' AND NOT (data)-[:encryptedData]->(:Credentials)",
            "RETURN DISTINCT data.name;"
        ],    
        "mitigation": [
            "MATCH (data:Data) WHERE data.name = '$1'",
            "WITH data",
            "CREATE (cred:Credentials {metaconcept: 'Credentials', name: 'EncryptionKey'}), (cred)<-[:encryptedData]-(data), (cred)-[:encryptCreds]->(data)"
        ],
        "attackData": 
            {
                "Tactic": {
                    "Credential Access": ["T1555", "T1003", "T1528", "T1649", "T1558", "T1539", "T1552"]
                },
                "Mitigations": ["M1047", "M1041", "M1027", "M1026", "M1022", "M1017", "M1032", "M1043", "M1040"]
            }
    },
    "shadowAdmins": {
        "description": "Identifies a [User] associated [Identity] linked to non-admin/root with {highPrivAppIAMs} association.",
        "impact": "User accounts that have inadvertently been assigned admin privilige may enable attackers to control accounts with unrestricted access and movement.",
        "badPattern": [
            "MATCH (:User)--(acc:Identity)-[:highPrivAppIAMs]->(app:Application)",
            "WHERE NOT acc.name =~ '(?i).*Admin.*|.*Root.*|.*Superuser.*'",
            "RETURN DISTINCT acc.name, app.name;"
        ],    
        "mitigation": [
            "MATCH (acc:Identity)-[r1:highPrivAppIAMs]->(app:Application),(acc:Identity)<-[r2:highPrivApps]-(app:Application)",
            "WHERE acc.name = '$1' AND app.name = '$2'",
            "DELETE r1,r2",
            "CREATE (acc)-[:lowPrivAppIAMs]->(app), (acc)<-[:lowPrivApps]-(app)"
        ],
        "attackData": 
            {
                "Tactic": {
                    "Initial Access": ["T1078"],
                    "Privilege Escalation": ["T1078"]
                    
                },
                "Mitigations": ["M1032", "M1018", "M1026", "M1036"]
            }
    },
    "highPrivServiceAccounts": {
        "description": "Identifies service account [Identity] with {highPrivAppIAMs} association.",
        "impact": "Existence of service, support or any other non user accounts with high privileges may facilitate lateral movement and privilige escalation.",
        "badPattern": [
            "MATCH (acc:Identity)-[:highPrivAppIAMs]->(app:Application)-[*0..2]->(cr:ConnectionRule)-[r1]->(net:Network)-[r3]->(cr2:ConnectionRule)--(fw:RoutingFirewall), (cr)<-[r2]-(net)<-[r4]-(cr2)",
            "WHERE acc.name =~ '(?i).*Service.*|.*Support.*'",
            "RETURN DISTINCT cr.name, net.name, fw.name, type(r1), type(r2), type(r3), type(r4);"
        ],    
        "mitigation": [
            "MATCH (cr:ConnectionRule {name: '$1'})-[r1]->(net:Network {name: '$2'}), (cr)<-[r2]-(net), (fw:RoutingFirewall {name: '$3'})",
            "DELETE r1,r2",
            "CREATE (net2:Network {metaconcept: 'Network', name: 'Net segmentedNetwork'}), (cr)-[:$4]->(net2), (cr)<-[:$5]-(net2), (cr2:ConnectionRule {metaconcept: 'ConnectionRule', name: 'CR Net_segmentedNetwork->$3'}), (net2)-[:$6]->(cr2), (net2)<-[:$7]-(cr2), (cr2)-[:connectionRules]->(fw), (cr2)<-[:routingFirewalls]-(fw)"
        ],
        "attackData": 
            {
                "Tactic": {
                    "Privilege Escalation": ["T1078"],
                    "Discovery": ["T1087"],
                    "Lateral Movement": ["T1072", "T1021"]
                },
                "Mitigations": ["M1027","M1036","M1035","M1030","M1033"]
            }
    },
    "userExposedNetworks": {
        "description": "Identifies [Network] where a [User] exists but [IDPS] or other security identified [Application] is missing.",
        "impact": "Networks without any security tool may faciliate user targeted attack such as phising to deliver malicious attachments or links which are not detected and blocked.",
        "badPattern": [
            "MATCH (fw:RoutingFirewall)--(cr:ConnectionRule)--(net:Network)",
            "WHERE NOT (net)<-[*0..2]-(:IDPS) AND (net)<-[*0..]-(:User)",
            "WITH fw, cr, net",
            "MATCH (net)<-[*0..]-(app:Application)",
            "WHERE NOT app.name  =~ '(?i).*Antivirus.*|.*IPS.*|.*IDS.*|.*EDR.*'",
            "RETURN DISTINCT fw.name, cr.name;"
        ],
        "mitigation": [
            "MATCH (fw:RoutingFirewall {name: '$1'})-[r1]->(cr:ConnectionRule {name: '$2'}), (fw)<-[r2]-(cr)",
            "DELETE r1,r2",
            "CREATE (idps:IDPS {metaconcept: 'IDPS', name: 'IDPS'}), (cr2:ConectionRule {metaconcept: 'ConnectionRule', name: 'CR IDPS<->$1'}), (fw)-[:routingFirewall]->(cr2), (fw)<-[:connectionRules]-(cr2), (cr2)<-[:application]-(idps), (cr2)-[:appConnections]->(idps), (idps)-[:application]->(cr), (idps)<-[:appConnections]-(cr)"
        ],
        "attackData": 
            {
                "Tactic": {
                    "Initial Access": ["T1566"],
                    "Lateral Movement": ["T1534"],
                    "Credential Access": ["T1056"]
                },
                "Mitigations": ["M1049", "M1031", "M1017"]
            }
    },    
    "exploitVulnerablePublicApp": {
        "description": "Identifies [Application] linked to a [SoftwareVulnerability] with association {ingoingAppConnections} to a [Network] outside DMZ.",
        "impact": "Application with known vulnerabilities accessible from the internet may be exploited by attackers to gain unauthorized access to the network and resources.",
        "badPattern": [
            "MATCH (net:Network)--(:ConnectionRule)-[:ingoingAppConnections]->(app:Application)<-[:vulnerabilities]-(sw:SoftwareVulnerability)",
            "WHERE NOT net.name =~ '(?i).*DMZ.*|.*Demilitarized Zone.*'",
            "RETURN DISTINCT app.name, net.name",
            "UNION",
            "MATCH (net:Network)--(:ConnectionRule)-[:ingoingAppConnections]->(app:Application)-[:hostApp]->(:Application)<-[:vulnerabilities]-(sw:SoftwareVulnerability)",
            "WHERE NOT net.name =~ '(?i).*DMZ.*|.*Demilitarized Zone.*'",
            "RETURN DISTINCT app.name, net.name;"
        ],    
        "mitigation": [
            "MATCH (app:Application {name: '$1'})--(cr:ConnectionRule)-[r1]->(net:Network {name: '$2'}), (cr)<-[r2]-(net)",
            "DELETE r1,r2"
        ],
        "attackData": 
            {
                "Tactic": {
                    "Initial Access": ["T1190"]
                },
                "Mitigations": ["M1030", "M1051", "M1016"]
            }
    },
    "exploitVulnerableApp": {
        "description": "Identifies [SoftwareVulnerability] linked to an [Application] or [SoftwareProduct] with associated [Identity].",
        "impact": "Applications with known vulnerabilities may be exploited by attackers to elevate privileges or to bypass security features.",
        "badPattern": [
            "MATCH (:Identity)-[r]->(app:Application)<-[:vulnerabilities]-(sw:SoftwareVulnerability)",
            "WHERE TYPE(r) IN ['highPrivAppIAMs', 'executionPrivIAMs', 'writingIAMs', 'deletingIAMs']",
            "RETURN DISTINCT app.name",
            "UNION",
            "MATCH (:Identity)-[r]->(app:Application)--(:SoftwareProduct)<-[:softProductVulnerability]-(sw:SoftwareVulnerability)",
            "WHERE TYPE(r) IN ['highPrivAppIAMs', 'executionPrivIAMs', 'writingIAMs', 'deletingIAMs']",
            "RETURN DISTINCT app.name"
        ],    
        "mitigation": [
            "MATCH (app:Application {name: '$1'})-[r]-()",
            "WHERE NOT TYPE(r) IN ['vulnerabilities', 'application', 'appSoftProduct', 'softApplications]",
            "DELETE r"
        ],
        "attackData": 
            {
                "Tactic": {
                    "Execution": ["T1203"],
                    "Privilege Escalation": ["T1068"],
                    "Defense Evasion": ["T1211"],
                    "Credential Access": ["T1212"]
                },
                "Mitigations": ["M1051", "M1048", "M1019"]
            }
    },
    "activeNetworkScan": {
        "description": "Identifies [Network] with {ingoingNetConnections} association to a [RoutingFirewall].",
        "impact": "A network that allows ingoing traffic may enable active reconnaissance scans that probes infrastructure via network traffic to gather information.",
        "badPattern": [
            "MATCH (net:Network)<-[:ingoingNetConnections]-(cr:ConnectionRule)-->(fw:RoutingFirewall)",
            "RETURN DISTINCT net.name, cr.name, fw.name;"
        ],    
        "mitigation": [
            "MATCH (net:Network {name: '$1'})<-[r1]-(cr:ConnectionRule {name: '$2'})-->(fw:RoutingFirewall {name: '$3'}), (net)-[r2]->(cr)",
            "DELETE r1,r2",
            "CREATE (net)<-[:outgoingNetConnections]-(cr), (net)-[:outNetworks]->(cr)"
        ],
        "attackData": 
            {
                "Tactic": {
                    "Reconnaissance": ["T1595", "T1590"]
                },
                "Mitigations": ["M1056"]
            }
    },
    "userExposedHardware": {
        "description": "Identifies [Hardware] associated with a [User] and with {hostHardware} association to a [Network] linked [Application].",
        "impact": "Adversaries may deliver malware through removable media such as USB and use the Autorun features when inserted into hardware to gain access to the network and resources. Alternatively, adversaries may introduce hardware devices into a system or network to gain access.",
        "badPattern": [
            "MATCH (:User)<-[:hardwareSystems]-(hw:Hardware)-[:hostHardware]->(app:Application)-[*0..3]-(:Network)",
            "RETURN DISTINCT hw.name, app.name;"
        ],    
        "mitigation": [
            "MATCH (hw:Hardware {name: '$1'})-[r1:hardwareSystems]->(usr:User), (hw)<-[r2:users]-(usr)",
            "DELETE r1,r2"
        ],
        "attackData": 
            {
                "Tactic": {
                    "Initial Access": ["T1200", "T1091"],
                    "Lateral Movement": ["T1091"]
                },
                "Mitigations": ["M1034", "M1040"]
            }
    }
}